{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AjaxUpload AjaxUpload is an extra package for MODx Revolution. It displays an upload button for uploading multiple files with progress counter. The upload queue could be filled and saved by Formit hooks. The uploaded files could be attached to the FormIt mails. Requirements MODX Revolution 2.2.0+ PHP v5.3+ Features Generate an upload button for uploading multiple files with progress counter. Works well in FF3.6+, Safari4+, Chrome and falls back to hidden iframe based upload in other browsers Uploaded files and generated thumbnails gets random filenames to avoid hotlinking uploaded not published files. Automatic thumbnail generation for uploaded jpeg, png and gif files. FormIt hooks to prefill the upload queue, read the upload queue after form submission and attach the uploaded files to FormIt mails.","title":"Description"},{"location":"#ajaxupload","text":"AjaxUpload is an extra package for MODx Revolution. It displays an upload button for uploading multiple files with progress counter. The upload queue could be filled and saved by Formit hooks. The uploaded files could be attached to the FormIt mails.","title":"AjaxUpload"},{"location":"#requirements","text":"MODX Revolution 2.2.0+ PHP v5.3+","title":"Requirements"},{"location":"#features","text":"Generate an upload button for uploading multiple files with progress counter. Works well in FF3.6+, Safari4+, Chrome and falls back to hidden iframe based upload in other browsers Uploaded files and generated thumbnails gets random filenames to avoid hotlinking uploaded not published files. Automatic thumbnail generation for uploaded jpeg, png and gif files. FormIt hooks to prefill the upload queue, read the upload queue after form submission and attach the uploaded files to FormIt mails.","title":"Features"},{"location":"contributors/","text":"The AjaxUpload project was started in 2012 by Thomas Jakobi . Many thanks to all who contributed, whether by creating pull requests, submitting bug reports, or donating.","title":"Contributors"},{"location":"installation/","text":"Install from MODX Extras Search for AjaxUpload in the Package Manager of your MODX installation and install it in there. Manual installation If you can't access the MODX Extras Repository in your MODX installation, you can manually install AjaxUpload. Download the transport package from MODX Extras (or one of the pre built transport packages in _packages ) Upload the zip file to your MODX installation's core/packages folder or upload it manually in the MODX Package Manager. In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button. AjaxUpload should now show up in the list of available packages. Click the corresponding 'Install' button and follow the instructions to complete the installation. Build it from source To build and install the package from source you could use Git Package Management . The GitHub repository of AjaxUpload contains a config.json to build that package locally. Use this option, if you want to debug AjaxUpload and/or contribute bugfixes and enhancements.","title":"Installation"},{"location":"installation/#install-from-modx-extras","text":"Search for AjaxUpload in the Package Manager of your MODX installation and install it in there.","title":"Install from MODX Extras"},{"location":"installation/#manual-installation","text":"If you can't access the MODX Extras Repository in your MODX installation, you can manually install AjaxUpload. Download the transport package from MODX Extras (or one of the pre built transport packages in _packages ) Upload the zip file to your MODX installation's core/packages folder or upload it manually in the MODX Package Manager. In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button. AjaxUpload should now show up in the list of available packages. Click the corresponding 'Install' button and follow the instructions to complete the installation.","title":"Manual installation"},{"location":"installation/#build-it-from-source","text":"To build and install the package from source you could use Git Package Management . The GitHub repository of AjaxUpload contains a config.json to build that package locally. Use this option, if you want to debug AjaxUpload and/or contribute bugfixes and enhancements.","title":"Build it from source"},{"location":"usage/","text":"How it works Ajaxupload generates an upload button for uploading multiple files with progress counter in FormIt forms. Works well in FF3.6+, Safari4+, Chrome and falls back to hidden iframe based upload in other browsers, providing good user experience everywhere. All uploaded files and generated thumbnails are given random filenames to avoid hotlinking uploaded not published files. Automatic thumbnail generation for uploaded jpeg, png and gif files. Other uploaded files will get a generic icon the file extension. The package contains FormIt hooks for prefilling the upload queue from a FormIt field value and be save the upload queue into a FormIt field value after a form submission. A third FormIt hook could attach the uploaded files to the FormIt mails. Display the Upload Button To display the upload button, you have to insert the AjaxUpload snippet call somewhere in a Resource. If you want to use it with FormIt, you should place the snippet call in the FormIt form: [[!AjaxUpload? &uid=`image` &allowedExtensions=`jpg,jpeg,png,gif` &thumbX=`75` &thumbY=`75` ]] The AjaxUpload snippet call could use the following properties: Property Description Default uid Unique upload queue id 1 md5 of MODX 'site_url' setting and the current resource id language Snippet/Javascript language - allowedExtensions Allowed file extensions for upload jpg,jpeg,png,gif maxFilesizeMb Maximum size for one file to upload 8 maxFiles Maximum count of files to upload 3 thumbX Horizontal size of generated thumb 100 thumbY Vertical size of generated thumb 100 addJquery Add jQuery script at the end of the body 0 (No) addJscript Add the snippet javascript and the fileuploader script at the end of the body 1 (Yes) addCss Add the snippet css at the end of the head 1 (Yes) If you want to change the text output in the upload section (i.e. the upload button), you have to edit the MODX lexicon in the namespace ajaxupload . Set and retrieve the upload queue To set/retreive the uploaded images in the upload queue by FormIt, you have to use the FormIt hooks in the FormIt snippet call: [[!FormIt? ... &preHooks=`Formit2AjaxUpload` &hooks=`AjaxUpload2Formit` &ajaxuploadFieldname=`image` &ajaxuploadTarget=`images/user/` &ajaxuploadUid=`image` ... ]] The AjaxUpload2Formit and the Formit2AjaxUpload hook use almost the same properties: Property Description Default ajaxuploadUid Unique upload queue id 1 md5 of MODX site_url setting and the current resource id ajaxuploadFieldname (required) FormIt field, the filenames/paths of the (already) uploaded files are saved in - ajaxuploadTarget (required) Target path for the (already) uploaded files (relative to $modx->getOption['assetsPath']). The folder should exist or should be createable and it has to be writable for PHP. - ajaxuploadFieldformat Format of the data saved in ajaxuploadFieldname csv The AjaxUpload2Formit hook uses additional properties: Property Description Default ajaxuploadClearQueue Clear the upload queue after a sucessful run of the hook 0 (No) ajaxuploadAllowOverwrite Allow overwrite of existing files with the same filename 1 (Yes) Attach the uploaded files to a mail If you want to attach the uploaded files to the email, you have to add the AjaxUploadAttachments hook to the FormIt Call before the email hook: [[!FormIt? ... &hooks=`AjaxUpload2Formit,AjaxUploadAttachments,email` ]] The AjaxUploadAttachments hook uses the properties of the hooks above. System Settings AjaxUpload uses the following system settings in the namespace ajaxupload : Key Description Default ajaxupload.cache_expires Expire Time of the AjaxUpload cache (in hours) 4 The parameter uid should be set different for each upload button on the site to separate multiple upload queues. \u21a9 \u21a9","title":"Usage"},{"location":"usage/#how-it-works","text":"Ajaxupload generates an upload button for uploading multiple files with progress counter in FormIt forms. Works well in FF3.6+, Safari4+, Chrome and falls back to hidden iframe based upload in other browsers, providing good user experience everywhere. All uploaded files and generated thumbnails are given random filenames to avoid hotlinking uploaded not published files. Automatic thumbnail generation for uploaded jpeg, png and gif files. Other uploaded files will get a generic icon the file extension. The package contains FormIt hooks for prefilling the upload queue from a FormIt field value and be save the upload queue into a FormIt field value after a form submission. A third FormIt hook could attach the uploaded files to the FormIt mails.","title":"How it works"},{"location":"usage/#display-the-upload-button","text":"To display the upload button, you have to insert the AjaxUpload snippet call somewhere in a Resource. If you want to use it with FormIt, you should place the snippet call in the FormIt form: [[!AjaxUpload? &uid=`image` &allowedExtensions=`jpg,jpeg,png,gif` &thumbX=`75` &thumbY=`75` ]] The AjaxUpload snippet call could use the following properties: Property Description Default uid Unique upload queue id 1 md5 of MODX 'site_url' setting and the current resource id language Snippet/Javascript language - allowedExtensions Allowed file extensions for upload jpg,jpeg,png,gif maxFilesizeMb Maximum size for one file to upload 8 maxFiles Maximum count of files to upload 3 thumbX Horizontal size of generated thumb 100 thumbY Vertical size of generated thumb 100 addJquery Add jQuery script at the end of the body 0 (No) addJscript Add the snippet javascript and the fileuploader script at the end of the body 1 (Yes) addCss Add the snippet css at the end of the head 1 (Yes) If you want to change the text output in the upload section (i.e. the upload button), you have to edit the MODX lexicon in the namespace ajaxupload .","title":"Display the Upload Button"},{"location":"usage/#set-and-retrieve-the-upload-queue","text":"To set/retreive the uploaded images in the upload queue by FormIt, you have to use the FormIt hooks in the FormIt snippet call: [[!FormIt? ... &preHooks=`Formit2AjaxUpload` &hooks=`AjaxUpload2Formit` &ajaxuploadFieldname=`image` &ajaxuploadTarget=`images/user/` &ajaxuploadUid=`image` ... ]] The AjaxUpload2Formit and the Formit2AjaxUpload hook use almost the same properties: Property Description Default ajaxuploadUid Unique upload queue id 1 md5 of MODX site_url setting and the current resource id ajaxuploadFieldname (required) FormIt field, the filenames/paths of the (already) uploaded files are saved in - ajaxuploadTarget (required) Target path for the (already) uploaded files (relative to $modx->getOption['assetsPath']). The folder should exist or should be createable and it has to be writable for PHP. - ajaxuploadFieldformat Format of the data saved in ajaxuploadFieldname csv The AjaxUpload2Formit hook uses additional properties: Property Description Default ajaxuploadClearQueue Clear the upload queue after a sucessful run of the hook 0 (No) ajaxuploadAllowOverwrite Allow overwrite of existing files with the same filename 1 (Yes)","title":"Set and retrieve the upload queue"},{"location":"usage/#attach-the-uploaded-files-to-a-mail","text":"If you want to attach the uploaded files to the email, you have to add the AjaxUploadAttachments hook to the FormIt Call before the email hook: [[!FormIt? ... &hooks=`AjaxUpload2Formit,AjaxUploadAttachments,email` ]] The AjaxUploadAttachments hook uses the properties of the hooks above.","title":"Attach the uploaded files to a mail"},{"location":"usage/#system-settings","text":"AjaxUpload uses the following system settings in the namespace ajaxupload : Key Description Default ajaxupload.cache_expires Expire Time of the AjaxUpload cache (in hours) 4 The parameter uid should be set different for each upload button on the site to separate multiple upload queues. \u21a9 \u21a9","title":"System Settings"}]}