{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AjaxUpload","text":"<p>AjaxUpload is an extra package for MODx Revolution. It displays an upload button for uploading multiple files with progress counter. The upload queue could be filled and saved by Formit hooks. The uploaded files could be attached to the FormIt mails.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>MODX Revolution 2.8+</li> <li>PHP 7.2+</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Generate an upload button for uploading multiple files with progress counter. </li> <li>Works well in FF3.6+, Safari4+, Chrome and falls back to hidden iframe based upload in other browsers</li> <li>Uploaded files and generated thumbnails gets random filenames to avoid hotlinking uploaded not published files.</li> <li>Automatic thumbnail generation for uploaded jpeg, png and gif files.</li> <li>FormIt hooks to prefill the upload queue, read the upload queue after form submission and attach the uploaded files to FormIt mails.</li> </ul>"},{"location":"#license","title":"License","text":"<p>The project is licensed under the GPLv2 license.</p>"},{"location":"#translations","title":"Translations","text":"<p>Translations of the package can be made for the Default Lexicon, the Properties Lexicon and the System Setting Lexicon</p>"},{"location":"contributors/","title":"Contributors","text":"<p>The AjaxUpload project was started in 2012 by Thomas Jakobi.</p> <p>Many thanks to all who contributed, whether by creating pull requests, submitting bug reports, or donating.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#install-from-modx-extras","title":"Install from MODX Extras","text":"<p>Search for AjaxUpload in the Package Manager of your MODX installation and install it in there.</p>"},{"location":"installation/#manual-installation","title":"Manual installation","text":"<p>If you can't access the MODX Extras Repository in your MODX installation, you can manually install AjaxUpload.</p> <ul> <li>Download the transport package from MODX Extras (or one of the pre built transport packages in _packages)</li> <li>Upload the zip file to your MODX installation's <code>core/packages</code> folder or upload it manually in the MODX Package Manager.</li> <li>In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button.</li> <li>AjaxUpload should now show up in the list of available packages. Click the corresponding 'Install' button and follow the instructions to complete the installation.</li> </ul>"},{"location":"installation/#build-it-from-source","title":"Build it from source","text":"<p>To build and install the package from source you could use Git Package Management. The GitHub repository of AjaxUpload contains a config.json to build that package locally. Use this option, if you want to debug AjaxUpload and/or contribute bugfixes and enhancements.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#how-it-works","title":"How it works","text":"<p>Ajaxupload creates an upload button for uploading multiple files with progress counter in FormIt forms. Works well in FF3.6+, Safari4+, Chrome and falls back to a hidden iframe-based upload in other browsers, providing a good user experience everywhere.</p> <p>All uploaded files and generated thumbnails are given random file names to avoid hotlinking of uploaded unpublished files. Automatic thumbnail generation for uploaded jpg, png and gif files. Other uploaded files get a generic file extension icon.</p> <p>The package includes FormIt hooks for pre-filling the upload queue from a FormIt field and saving the upload queue to a FormIt field after a form submission. A third FormIt hook can append the uploaded files to the FormIt mails.</p>"},{"location":"usage/#display-the-upload-button","title":"Display the Upload Button","text":"<p>To display the upload button, you need to place the AjaxUpload snippet call somewhere in a Resource. If you want to use it with FormIt, you need to place the snippet call in the FormIt form:</p> <pre><code>[[!AjaxUpload?\n&amp;uid=`image`\n&amp;allowedExtensions=`jpg,jpeg,png,gif`\n&amp;thumbX=`75`\n&amp;thumbY=`75`\n]]\n</code></pre> <p>The AjaxUpload snippet uses the following properties:</p> Property Description Default addCss Add the snippet css ad the end of the head. 1 (Yes) addJquery Add jQuery script at the end of the body. 0 (No) addJscript Add the snippet javascript and the fileuploader script at the end of the body. 1 (Yes) allowedExtensions Allowed file extensions for upload. jpg,jpeg,png,gif language Snippet/Javascript language. - maxFiles Maximum count of files to upload. 3 maxFilesizeMb Maximum size for one file to upload. 8 thumbX Horizontal size of generated thumb. 100 thumbY Vertical size of generated thumb. 100 uid Unique upload queue id <sup>1</sup>. md5 of MODX 'site_url' setting and the current resource id uploadSectionTpl Name of a chunk that contains the HTML code for the upload section. tplAjaxuploadUploadSection <p>If you want to change the text output in the upload section (i.e. the upload button), you have to edit the MODX lexicon in the namespace <code>ajaxupload</code>.</p>"},{"location":"usage/#set-and-retrieve-the-upload-queue","title":"Set and retrieve the upload queue","text":"<p>To set/retreive the uploaded images in the upload queue by FormIt, you have to use the FormIt hooks in the FormIt snippet call:</p> <pre><code>[[!FormIt?\n...\n&amp;preHooks=`Formit2AjaxUpload`\n&amp;hooks=`AjaxUpload2Formit`\n&amp;ajaxuploadFieldname=`image`\n&amp;ajaxuploadTarget=`images/user/`\n&amp;ajaxuploadUid=`image`\n...\n]]\n</code></pre> <p>The AjaxUpload2Formit and the Formit2AjaxUpload hook use almost the same properties:</p> Property Description Default ajaxuploadFieldformat Format of the data saved in <code>ajaxuploadFieldname</code>. csv ajaxuploadFieldname (required) Formit field, the filenames/paths of the (already) uploaded files are saved in. - ajaxuploadTarget (required) Target path for the (already) uploaded files (relative to $modx-&gt;getOption['assetsPath']). - ajaxuploadUid Unique upload queue id. - <p>The folder in <code>ajaxuploadTarget</code> has to exist and it has to be writable for PHP or it must be createable.</p> <p>The AjaxUpload2Formit hook uses additional properties:</p> Property Description Default ajaxuploadAllowOverwrite Allow overwrite of existing files with the same filename. 1 (Yes) ajaxuploadClearQueue Clear the upload queue after a sucessful run of the hook. 0 (No)"},{"location":"usage/#attach-the-uploaded-files-to-a-mail","title":"Attach the uploaded files to a mail","text":"<p>If you want to attach the uploaded files to the email, you have to add the AjaxUploadAttachments hook to the FormIt Call before the email hook:</p> <pre><code>[[!FormIt?\n...\n&amp;hooks=`AjaxUpload2Formit,AjaxUploadAttachments,email`\n]]\n</code></pre> <p>The AjaxUploadAttachments hook uses the properties of the hooks above.</p>"},{"location":"usage/#remove-the-uploaded-files","title":"Remove the uploaded files","text":"<p>If you want to remove the uploaded files i.e. after the mail is sent, you have to add the AjaxUploadRemove hook after the email hook:</p> <pre><code>[[!FormIt?\n...\n&amp;hooks=`AjaxUpload2Formit,AjaxUploadAttachments,email,AjaxUploadRemove`\n]]\n</code></pre>"},{"location":"usage/#make-the-upload-required","title":"Make the upload required","text":"<p>If you want to make the upload required, you have to add the AjaxUploadRequired hook to the FormIt Call before the email hook:</p> <pre><code>[[!FormIt?\n...\n&amp;hooks=`AjaxUpload2Formit,AjaxUploadRequired,email`\n]]\n</code></pre> <p>The AjaxUploadRequired hook uses additional properties:</p> Property Description Default ajaxuploadRequiredMessage The error message added, when no file is uploaded. It defaults to the lexicon entry <code>ajaxupload.uploadRequired</code>. -"},{"location":"usage/#system-settings","title":"System Settings","text":"<p>AjaxUpload uses the following system settings in the namespace <code>ajaxupload</code>:</p> Key Name Description Default ajaxupload.cache_expires Expire Time Expire Time of the AjaxUpload cache (in hours) 4 ajaxupload.debug Debug Log debug information in the MODX error log. No ajaxupload.image_tpl Image Template Name of a chunk that contains the HTML code for displaying the uploaded image. tplAjaxUploadImage <ol> <li> <p>The parameter uid has to be set different for each upload button on the site to separate multiple upload queues.\u00a0\u21a9</p> </li> </ol>"}]}