{
    "docs": [
        {
            "location": "/", 
            "text": "AjaxUpload\n\n\nAjaxUpload is an extra package for MODx Revolution. It displays an upload button\nfor uploading multiple files with progress counter. The upload queue could be\nfilled and saved by Formit hooks. The uploaded files could be attached to the\nFormIt mails.\n\n\nRequirements\n\n\n\n\nMODX Revolution 2.2.0+\n\n\nPHP v5.3+\n\n\n\n\nFeatures\n\n\n\n\nGenerate an upload button for uploading multiple files with progress counter. \n\n\nWorks well in FF3.6+, Safari4+, Chrome and falls back to hidden iframe based upload in other browsers\n\n\nUploaded files and generated thumbnails gets random filenames to avoid hotlinking uploaded not published files.\n\n\nAutomatic thumbnail generation for uploaded jpeg, png and gif files.\n\n\nFormIt hooks to prefill the upload queue, read the upload queue after form submission and attach the uploaded files to FormIt mails.", 
            "title": "Description"
        }, 
        {
            "location": "/#ajaxupload", 
            "text": "AjaxUpload is an extra package for MODx Revolution. It displays an upload button\nfor uploading multiple files with progress counter. The upload queue could be\nfilled and saved by Formit hooks. The uploaded files could be attached to the\nFormIt mails.", 
            "title": "AjaxUpload"
        }, 
        {
            "location": "/#requirements", 
            "text": "MODX Revolution 2.2.0+  PHP v5.3+", 
            "title": "Requirements"
        }, 
        {
            "location": "/#features", 
            "text": "Generate an upload button for uploading multiple files with progress counter.   Works well in FF3.6+, Safari4+, Chrome and falls back to hidden iframe based upload in other browsers  Uploaded files and generated thumbnails gets random filenames to avoid hotlinking uploaded not published files.  Automatic thumbnail generation for uploaded jpeg, png and gif files.  FormIt hooks to prefill the upload queue, read the upload queue after form submission and attach the uploaded files to FormIt mails.", 
            "title": "Features"
        }, 
        {
            "location": "/installation/", 
            "text": "Install from MODX Extras\n\n\nSearch for AjaxUpload in the Package Manager of your MODX installation and\ninstall it in there.\n\n\nManual installation\n\n\nIf you can't access the MODX Extras Repository in your MODX installation, you\ncan manually install AjaxUpload.\n\n\n\n\nDownload the transport package from \nMODX Extras\n (or one of the pre built transport packages in \n_packages\n)\n\n\nUpload the zip file to your MODX installation's \ncore/packages\n folder or upload it manually in the MODX Package Manager.\n\n\nIn the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button.\n\n\nAjaxUpload should now show up in the list of available packages. Click the corresponding 'Install' button and follow the instructions to complete the installation.\n\n\n\n\nBuild it from source\n\n\nTo build and install the package from source you could use \nGit Package\nManagement\n. The GitHub\nrepository of AjaxUpload contains a\n\nconfig.json\n\nto build that package locally. Use this option, if you want to debug AjaxUpload\nand/or contribute bugfixes and enhancements.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#install-from-modx-extras", 
            "text": "Search for AjaxUpload in the Package Manager of your MODX installation and\ninstall it in there.", 
            "title": "Install from MODX Extras"
        }, 
        {
            "location": "/installation/#manual-installation", 
            "text": "If you can't access the MODX Extras Repository in your MODX installation, you\ncan manually install AjaxUpload.   Download the transport package from  MODX Extras  (or one of the pre built transport packages in  _packages )  Upload the zip file to your MODX installation's  core/packages  folder or upload it manually in the MODX Package Manager.  In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button.  AjaxUpload should now show up in the list of available packages. Click the corresponding 'Install' button and follow the instructions to complete the installation.", 
            "title": "Manual installation"
        }, 
        {
            "location": "/installation/#build-it-from-source", 
            "text": "To build and install the package from source you could use  Git Package\nManagement . The GitHub\nrepository of AjaxUpload contains a config.json \nto build that package locally. Use this option, if you want to debug AjaxUpload\nand/or contribute bugfixes and enhancements.", 
            "title": "Build it from source"
        }, 
        {
            "location": "/usage/", 
            "text": "How it works\n\n\nAjaxupload generates an upload button for uploading multiple files with progress\ncounter in FormIt forms. Works well in FF3.6+, Safari4+, Chrome and falls back to\nhidden iframe based upload in other browsers, providing good user experience\neverywhere.\n\n\nAll uploaded files and generated thumbnails are given random filenames to avoid\nhotlinking uploaded not published files. Automatic thumbnail generation for\nuploaded jpeg, png and gif files. Other uploaded files will get a generic icon\nthe file extension.\n\n\nThe package contains FormIt hooks for prefilling the upload queue from a FormIt\nfield value and be save the upload queue into a FormIt field value after a form\nsubmission. A third FormIt hook could attach the uploaded files to the FormIt\nmails.\n\n\nDisplay the Upload Button\n\n\nTo display the upload button, you have to insert the \nAjaxUpload snippet\n call\nsomewhere in a Resource. If you want to use it with FormIt, you should place the\nsnippet call in the FormIt form:\n\n\n[[!AjaxUpload?\n\nuid=`image`\n\nallowedExtensions=`jpg,jpeg,png,gif`\n\nthumbX=`75`\n\nthumbY=`75`\n]]\n\n\n\nThe \nAjaxUpload snippet\n call could use the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nuid\n\n\nUnique upload queue id \n1\n\n\nmd5 of MODX 'site_url' setting and the current resource id\n\n\n\n\n\n\nlanguage\n\n\nSnippet/Javascript language\n\n\n-\n\n\n\n\n\n\nallowedExtensions\n\n\nAllowed file extensions for upload\n\n\njpg,jpeg,png,gif\n\n\n\n\n\n\nmaxFilesizeMb\n\n\nMaximum size for one file to upload\n\n\n8\n\n\n\n\n\n\nmaxFiles\n\n\nMaximum count of files to upload\n\n\n3\n\n\n\n\n\n\nthumbX\n\n\nHorizontal size of generated thumb\n\n\n100\n\n\n\n\n\n\nthumbY\n\n\nVertical size of generated thumb\n\n\n100\n\n\n\n\n\n\naddJquery\n\n\nAdd jQuery script at the end of the body\n\n\n0 (No)\n\n\n\n\n\n\naddJscript\n\n\nAdd the snippet javascript and the fileuploader script at the end of the body\n\n\n1 (Yes)\n\n\n\n\n\n\naddCss\n\n\nAdd the snippet css at the end of the head\n\n\n1 (Yes)\n\n\n\n\n\n\n\n\nIf you want to change the text output in the upload section (i.e. the upload\nbutton), you have to edit the MODX lexicon in the namespace \najaxupload\n.\n\n\nSet and retrieve the upload queue\n\n\nTo set/retreive the uploaded images in the upload queue by FormIt, you have to\nuse the FormIt hooks in the \nFormIt snippet\n call:\n\n\n[[!FormIt?\n...\n\npreHooks=`Formit2AjaxUpload`\n\nhooks=`AjaxUpload2Formit`\n\najaxuploadFieldname=`image`\n\najaxuploadTarget=`images/user/`\n\najaxuploadUid=`image`\n...\n]]\n\n\n\nThe AjaxUpload2Formit and the Formit2AjaxUpload hook use almost the same properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\najaxuploadUid\n\n\nUnique upload queue id \n1\n\n\nmd5 of MODX site_url setting and the current resource id\n\n\n\n\n\n\najaxuploadFieldname\n\n\n(required) FormIt field, the filenames/paths of the (already) uploaded files are saved in\n\n\n-\n\n\n\n\n\n\najaxuploadTarget\n\n\n(required) Target path for the (already) uploaded files (relative to $modx-\ngetOption['assetsPath']). The folder should exist or should be createable and it has to be writable for PHP.\n\n\n-\n\n\n\n\n\n\najaxuploadFieldformat\n\n\nFormat of the data saved in ajaxuploadFieldname\n\n\ncsv\n\n\n\n\n\n\n\n\nThe AjaxUpload2Formit hook uses additional properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\najaxuploadClearQueue\n\n\nClear the upload queue after a sucessful run of the hook\n\n\n0 (No)\n\n\n\n\n\n\najaxuploadAllowOverwrite\n\n\nAllow overwrite of existing files with the same filename\n\n\n1 (Yes)\n\n\n\n\n\n\n\n\nAttach the uploaded files to a mail\n\n\nIf you want to attach the uploaded files to the email, you have to add the\nAjaxUploadAttachments hook to the FormIt Call before the email hook:\n\n\n[[!FormIt?\n...\n\nhooks=`AjaxUpload2Formit,AjaxUploadAttachments,email`\n]]\n\n\n\nThe AjaxUploadAttachments hook uses the properties of the hooks above.\n\n\nSystem Settings\n\n\nAjaxUpload uses the following system settings in the namespace \najaxupload\n:\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\najaxupload.cache_expires\n\n\nExpire Time of the AjaxUpload cache (in hours)\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe parameter uid should be set different for each upload button on the site to separate multiple upload queues.", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#how-it-works", 
            "text": "Ajaxupload generates an upload button for uploading multiple files with progress\ncounter in FormIt forms. Works well in FF3.6+, Safari4+, Chrome and falls back to\nhidden iframe based upload in other browsers, providing good user experience\neverywhere.  All uploaded files and generated thumbnails are given random filenames to avoid\nhotlinking uploaded not published files. Automatic thumbnail generation for\nuploaded jpeg, png and gif files. Other uploaded files will get a generic icon\nthe file extension.  The package contains FormIt hooks for prefilling the upload queue from a FormIt\nfield value and be save the upload queue into a FormIt field value after a form\nsubmission. A third FormIt hook could attach the uploaded files to the FormIt\nmails.", 
            "title": "How it works"
        }, 
        {
            "location": "/usage/#display-the-upload-button", 
            "text": "To display the upload button, you have to insert the  AjaxUpload snippet  call\nsomewhere in a Resource. If you want to use it with FormIt, you should place the\nsnippet call in the FormIt form:  [[!AjaxUpload? uid=`image` allowedExtensions=`jpg,jpeg,png,gif` thumbX=`75` thumbY=`75`\n]]  The  AjaxUpload snippet  call could use the following properties:     Property  Description  Default      uid  Unique upload queue id  1  md5 of MODX 'site_url' setting and the current resource id    language  Snippet/Javascript language  -    allowedExtensions  Allowed file extensions for upload  jpg,jpeg,png,gif    maxFilesizeMb  Maximum size for one file to upload  8    maxFiles  Maximum count of files to upload  3    thumbX  Horizontal size of generated thumb  100    thumbY  Vertical size of generated thumb  100    addJquery  Add jQuery script at the end of the body  0 (No)    addJscript  Add the snippet javascript and the fileuploader script at the end of the body  1 (Yes)    addCss  Add the snippet css at the end of the head  1 (Yes)     If you want to change the text output in the upload section (i.e. the upload\nbutton), you have to edit the MODX lexicon in the namespace  ajaxupload .", 
            "title": "Display the Upload Button"
        }, 
        {
            "location": "/usage/#set-and-retrieve-the-upload-queue", 
            "text": "To set/retreive the uploaded images in the upload queue by FormIt, you have to\nuse the FormIt hooks in the  FormIt snippet  call:  [[!FormIt?\n... preHooks=`Formit2AjaxUpload` hooks=`AjaxUpload2Formit` ajaxuploadFieldname=`image` ajaxuploadTarget=`images/user/` ajaxuploadUid=`image`\n...\n]]  The AjaxUpload2Formit and the Formit2AjaxUpload hook use almost the same properties:     Property  Description  Default      ajaxuploadUid  Unique upload queue id  1  md5 of MODX site_url setting and the current resource id    ajaxuploadFieldname  (required) FormIt field, the filenames/paths of the (already) uploaded files are saved in  -    ajaxuploadTarget  (required) Target path for the (already) uploaded files (relative to $modx- getOption['assetsPath']). The folder should exist or should be createable and it has to be writable for PHP.  -    ajaxuploadFieldformat  Format of the data saved in ajaxuploadFieldname  csv     The AjaxUpload2Formit hook uses additional properties:     Property  Description  Default      ajaxuploadClearQueue  Clear the upload queue after a sucessful run of the hook  0 (No)    ajaxuploadAllowOverwrite  Allow overwrite of existing files with the same filename  1 (Yes)", 
            "title": "Set and retrieve the upload queue"
        }, 
        {
            "location": "/usage/#attach-the-uploaded-files-to-a-mail", 
            "text": "If you want to attach the uploaded files to the email, you have to add the\nAjaxUploadAttachments hook to the FormIt Call before the email hook:  [[!FormIt?\n... hooks=`AjaxUpload2Formit,AjaxUploadAttachments,email`\n]]  The AjaxUploadAttachments hook uses the properties of the hooks above.", 
            "title": "Attach the uploaded files to a mail"
        }, 
        {
            "location": "/usage/#system-settings", 
            "text": "AjaxUpload uses the following system settings in the namespace  ajaxupload :     Key  Description  Default      ajaxupload.cache_expires  Expire Time of the AjaxUpload cache (in hours)  4         The parameter uid should be set different for each upload button on the site to separate multiple upload queues.", 
            "title": "System Settings"
        }, 
        {
            "location": "/contributors/", 
            "text": "The AjaxUpload project was started in 2012 by \nThomas Jakobi\n.\n\n\nMany thanks to everyone, who has contributed to this project:\n\n\n\n\n@bugakov\n\n\n@Jo", 
            "title": "Contributors"
        }, 
        {
            "location": "/donate/", 
            "text": "Support AjaxUpload\n\n\nAjaxUpload\n is and always will be free and open-source, but it still requires many man-hours of development, \nbug-fixing, support in MODX forums and on GitHub between the releases.\n\n\nPlease support the ongoing and past development of \nAjaxUpload\n by making a\ndonation below.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAjaxUpload\n development is sponsored by Treehillstudio \u2013 MODX Development in M\u00fcnsterland.", 
            "title": "Donate"
        }, 
        {
            "location": "/donate/#support-ajaxupload", 
            "text": "AjaxUpload  is and always will be free and open-source, but it still requires many man-hours of development, \nbug-fixing, support in MODX forums and on GitHub between the releases.  Please support the ongoing and past development of  AjaxUpload  by making a\ndonation below.            AjaxUpload  development is sponsored by Treehillstudio \u2013 MODX Development in M\u00fcnsterland.", 
            "title": "Support AjaxUpload"
        }
    ]
}