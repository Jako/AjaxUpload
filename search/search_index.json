{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AjaxUpload","text":"<p>AjaxUpload is an extra package for MODx Revolution. It displays an upload area with pqinoa/filepond for uploading multiple files. The upload queue can be filled and saved by Formit hooks. The uploaded files can be attached to the FormIt mails and deleted after the form submission.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>MODX Revolution 2.8+</li> <li>PHP 7.4+</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Generate an upload area for uploading multiple files. </li> <li>Uploaded files gets random filenames to avoid hotlinking uploaded not   published files.</li> <li>FormIt hooks to prefill the upload queue, read the upload queue after form   submission, attach the uploaded files to FormIt mails and delete them afer   the form submission.</li> </ul>"},{"location":"#license","title":"License","text":"<p>The project is licensed under the GPLv2 license.</p>"},{"location":"#translations","title":"Translations","text":"<p>Translations of the package can be made for the Default Lexicon, the Properties Lexicon and the System Setting Lexicon</p>"},{"location":"contributors/","title":"Contributors","text":"<p>The AjaxUpload project was started in 2012 by Thomas Jakobi.</p> <p>Many thanks to all who contributed, whether by creating pull requests, submitting bug reports, or donating.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#install-from-modx-extras","title":"Install from MODX Extras","text":"<p>Search for AjaxUpload in the Package Manager of your MODX installation and install it in there.</p>"},{"location":"installation/#manual-installation","title":"Manual installation","text":"<p>If you can't access the MODX Extras Repository in your MODX installation, you can manually install AjaxUpload.</p> <ul> <li>Download the transport package from MODX Extras (or one of the pre built transport packages in _packages)</li> <li>Upload the zip file to your MODX installation's <code>core/packages</code> folder or upload it manually in the MODX Package Manager.</li> <li>In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button.</li> <li>AjaxUpload should now show up in the list of available packages. Click the corresponding 'Install' button and follow the instructions to complete the installation.</li> </ul>"},{"location":"installation/#build-it-from-source","title":"Build it from source","text":"<p>To build and install the package from source you could use Git Package Management. The GitHub repository of AjaxUpload contains a config.json to build that package locally. Use this option, if you want to debug AjaxUpload and/or contribute bugfixes and enhancements.</p>"},{"location":"migration/","title":"Migration","text":""},{"location":"migration/#from-1x-to-2x","title":"From 1.x to 2.x","text":"<p>With version 2.x the javascript handling of the file upload has been changed from Valums-File-Uploader/file-uploader to pqina/filepond. Because of this change, some snippet/hook properties are no longer needed and some snippet/hook properties are added. Some system settings have also been changed.</p>"},{"location":"migration/#ajaxupload-snippet-properties","title":"AjaxUpload snippet properties","text":"<p>The following snippet properties have to be removed or modified in the AjaxUpload snippet call:</p> Old property Change addJquery Remove from snippet call. allowedExtensions The property has to be replaced with the <code>acceptedFileTypes</code> property. The property value has to be modified. language Remove from snippet call. maxFilesizeMb The property has to be replaced with the <code>maxFileSize</code> property. The property value has to be modified. thumbX Remove from snippet call. thumbY Remove from snippet call. uid The uid should contain only alphanumeric characters. <p>The following new properties are available and have to be added in the AjaxUpload snippet call:</p> New property Change acceptedFileTypes The property has to be replaced from the <code>allowedExtensions</code> property. The property value has to be modified. fieldformat The property has to be filled with the value of the <code>ajaxuploadFieldformat</code> property used in the according FormIt snippet call. maxFileSize The property has to be replaced from the <code>maxFilesizeMb</code> property. The property value has to be modified. placeholderPrefix The property has to be filled with the value of the <code>placeholderPrefix</code> property used in the according FormIt snippet call. scriptTpl The property has to be added to the snippet call, if you don't want to use the default. showCredits The property has to be added to the snippet call, if you don't want to use the default. targetMediasource The property has to be filled with the value of the <code>ajaxuploadTargetMediasource</code> property used in the according FormIt snippet call. value The property has to be added to the snippet call, if you don't want to use the default."},{"location":"migration/#formit-hook-properties","title":"FormIt hook properties","text":"<p>The following FormIt hook properties have to be removed or modified in the FormIt snippet call:</p> Old property Change ajaxuploadClearQueue Remove from snippet call. ajaxuploadFieldname Remove from snippet call. <p>The following new properties are available and have to be added or modified in the FormIt snippet call:</p> New property Change ajaxuploadCacheExpires The property has to be added to the snippet call, if you don't want to use the default. ajaxuploadSanitizeFilename The property has to be added to the snippet call, if you don't want to use the default. ajaxuploadTargetMediasource The property has to be added to the snippet call, if you don't want to use the default."},{"location":"migration/#system-settings","title":"System settings","text":"<p>The following system settings are removed and not used anymore:</p> Old Setting Change ajaxupload.image_tpl Removed"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#how-it-works","title":"How it works","text":"<p>Ajaxupload creates an upload area for uploading multiple files in FormIt forms. All uploaded files are given random file names to avoid hotlinking of uploaded unpublished files.</p> <p>With two FormIt hooks the upload queues can be pre-filled from FormIt field value and saved into FormIt field value. With two other FormIt hooks the uploaded files can be attached to the FormIt mails and deleted after the form submit.</p>"},{"location":"usage/#display-the-upload-area","title":"Display the Upload Area","text":"<p>To display the upload area, you need to place the AjaxUpload snippet call in a form handled by FormIt:</p> <pre><code>[[!AjaxUpload?\n&amp;uid=`image`\n&amp;acceptedFileTypes=`image/jpeg,image/gif,image/png,image/webp`\n]]\n</code></pre> <p>The AjaxUpload snippet uses the following properties:</p> Property Description Default acceptedFileTypes Accepted file mime types for upload. image/jpeg,image/gif,image/png,image/webp addCss Add the CSS at the end of the head. 1 (Yes) addJscript Add the snippet javascript and the fileuploader script at the end of the body. 1 (Yes) fieldformat The value of ajaxuploadFieldformat property used in the according FormIt snippet call. csv maxFiles Maximum count of files to upload. 3 maxFileSize Maximum size for one file to upload. 8MB placeholderPrefix The value of placeholderPrefix property used in the according FormIt snippet call. fi. scriptTpl Name of a chunk that contains the Javascript code for the upload section. tplAjaxuploadScript showCredits Show the credits of pqina/FilePond javascript 1 (Yes) targetMediasource The value of ajaxuploadTargetMediasource property used in the according FormIt snippet call. - uid Comma separated list of unique upload queue ids. md5 of MODX 'site_url' setting and the current resource id uploadSectionTpl Name of a chunk that contains the HTML code for the upload section. tplAjaxuploadUploadSection value Comma separated list of files in the upload queue. Supercedes the value that is retrieved with the Formit2AjaxUpload hook. - <p>All text output of the snippet can be edited in the MODX lexicon in the namespace <code>ajaxupload</code>.</p>"},{"location":"usage/#set-and-retrieve-the-upload-queue","title":"Set and retrieve the upload queue","text":"<p>To set/retreive the uploaded files in the upload queue by FormIt, you have to use the FormIt hooks in the FormIt snippet call:</p> <pre><code>[[!FormIt?\n...\n&amp;preHooks=`Formit2AjaxUpload`\n&amp;hooks=`AjaxUpload2Formit`\n&amp;ajaxuploadUid=`image`\n&amp;ajaxuploadTarget=`images/user/`\n...\n]]\n</code></pre> <p>The AjaxUpload2Formit and the Formit2AjaxUpload hooks use almost the same properties:</p> Property Description Default ajaxuploadCacheExpires Expire Time of the AjaxUpload cache (in hours) System setting <code>ajaxupload.cache_expires</code> ajaxuploadFieldformat Format of the data saved in <code>ajaxuploadUid</code>. csv ajaxuploadTarget Target path for the uploaded files. The folder should exist or be created and must be writable for PHP. - ajaxuploadTargetMediasource If not empty, The target path is prefixed with the media source base path. Otherwise the target path is prefixed with the MODX assets path. - ajaxuploadUid Comma separated list of unique upload queue ids. Also the names of the fields used in the hooks. - <p>Caution</p> <p>If the ajaxuploadTargetRelativePath property is used, the ajaxuploadTarget property has to contain an absolute path. i.e:  <pre><code>&amp;ajaxuploadTarget=`[[++base_path]]mycustompath/images`\n&amp;ajaxuploadTargetRelativePath=`[[++base_path]]mycustompath`\n</code></pre></p> <p>The AjaxUpload2Formit hook uses the following additional properties:</p> Property Description Default ajaxuploadAllowOverwrite Allow overwrite of existing files with the same filename. 1 (Yes) ajaxuploadSanitizeFilename Sanitize the filename of the uploaded file. 0 (No)"},{"location":"usage/#attach-the-uploaded-files-to-a-mail","title":"Attach the uploaded files to a mail","text":"<p>If you want to attach the uploaded files to the email, you have to add the AjaxUploadAttachments hook to the FormIt Call before the email hook:</p> <pre><code>[[!FormIt?\n...\n&amp;hooks=`AjaxUpload2Formit,AjaxUploadAttachments,email`\n]]\n</code></pre> <p>The AjaxUploadAttachments hook uses the properties of the hooks above.</p>"},{"location":"usage/#remove-the-uploaded-files","title":"Remove the uploaded files","text":"<p>If you want to remove the uploaded files i.e. after the mail is sent, you have to add the AjaxUploadRemove hook after the email hook:</p> <pre><code>[[!FormIt?\n...\n&amp;hooks=`AjaxUpload2Formit,AjaxUploadAttachments,email,AjaxUploadRemove`\n]]\n</code></pre> <p>The AjaxUploadRemove hook uses the properties of the hooks above.</p>"},{"location":"usage/#make-the-upload-required","title":"Make the upload required","text":"<p>If you want to make the upload required, you have to add the AjaxUploadRequired hook to the FormIt Call before the email hook:</p> <pre><code>[[!FormIt?\n...\n&amp;hooks=`AjaxUpload2Formit,AjaxUploadRequired,email`\n]]\n</code></pre> <p>The AjaxUploadRequired hook uses additional properties:</p> Property Description Default ajaxuploadRequiredMessage The error message added, when no file is uploaded. Lexicon entry <code>ajaxupload.uploadRequired</code>"},{"location":"usage/#system-settings","title":"System Settings","text":"<p>AjaxUpload uses the following system settings in the namespace <code>ajaxupload</code>:</p> Key Name Description Default ajaxupload.cache_expires Expire Time Expire Time of the AjaxUpload cache (in hours) 4 ajaxupload.debug Debug Log debug information in the MODX error log. No <ol> <li> <p>The parameter uid has to be set different for each upload button on the site to separate multiple upload queues.\u00a0\u21a9</p> </li> </ol>"}]}